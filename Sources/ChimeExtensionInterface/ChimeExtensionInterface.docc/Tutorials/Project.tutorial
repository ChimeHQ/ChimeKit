@Tutorial(time: 45) {
    @XcodeRequirement(title: "Xcode 14 (with macOS Ventura SDK)", destination: "https://developer.apple.com/download/")
    
    @Intro(title: "Project Structure") {
		Chime's extensions can be built and distributed in a number of ways. Extensions can be standalone ExtensionKit bundles, incorporated into Chime's Extension Gallery application, or even the main app itself. To take advantage of this flexibility, a little more care has to be put into project structure.
		
		We'll start by setting up a project that supports all of the distribution options.		
    }
    
    @Section(title: "Making a Package") {
        @ContentAndMedia {
            The most flexible way to structure an extension is by starting with a package. This provides a convenient and familiar way to pull the core functionality into another project for final distribution.
        }
        
        @Steps {
            @Step {
                Create a new Package.swift file.
                
                @Code(name: "Package.swift", file: "extensions-project-1-1-package.swift")
            }
            
            @Step {
                Add the reference to `ChimeKit`.
                
                @Code(name: "Package.swift", file: "extensions-project-1-2-package.swift")
            }
            
            @Step {
                Add a dependency on `ChimeKitWrapper` to the target.
                
                This is needed to work around an SPM limitation and provide access to both ChimeKit and its bundled packages.
                
                @Code(name: "Package.swift", file: "extensions-project-1-3-package.swift")
            }
            
            @Step {
                Adjust our minimum OS requirement.
                
                This should be macOS 12 or higher.
                
                @Code(name: "Package.swift", file: "extensions-project-1-4-package.swift")
            }
        }
    }
    
    @Section(title: "Extension Class") {
        @ContentAndMedia {
            With our package in place, we can build a simple class that conforms to the `ExtensionProtocol` interface. This is where all the core functionality will live. We'll use this class to build an ExtensionKit target later on.
        }
        
        @Steps {
            @Step {
                Define the `SwiftExtension` class.
                
                Note that this class is public.
                
                @Code(name: "Sources/ChimeSwift/SwiftExtension.swift", file: "extensions-project-2-1-definition.swift")
            }
            
            @Step {
                Import `ChimeKit`.
                
                @Code(name: "Sources/ChimeSwift/SwiftExtension.swift", file: "extensions-project-2-2-definition.swift")
            }
            
            @Step {
                Create an `init` method that accepts a `HostProtocol` argument.

                @Code(name: "Sources/ChimeSwift/SwiftExtension.swift", file: "extensions-project-2-3-definition.swift")
            }
            
            @Step {
                Add an instance variable to hold a reference to the `HostProtocol` object.

                @Code(name: "Sources/ChimeSwift/SwiftExtension.swift", file: "extensions-project-2-4-definition.swift")
            }
            
            @Step {
                Add conformance to `ExtensionProtocol`.
                
                This protocol has default implementations, so there's no need to fill in more to start.

                @Code(name: "Sources/ChimeSwift/SwiftExtension.swift", file: "extensions-project-2-5-definition.swift")
            }
        }
    }
    
    @Section(title: "Create a Container App") {
        @ContentAndMedia {
            ExtensionKit extensions can only be discovered when built into a container application. We'll make an Xcode project to build our extension, along with a container app to install it.
        }
        
        @Steps {
            @Step {
                Create a new Xcode project.
                
                Select the macOS > App target template.
                
                @Image(source: "project-new.png", alt: "A screenshot of Xcode's new project window, with the macOS app template selected.")
            }
            
            @Step {
                Configure the target.
                
                For testing purposes, you can keep things simple. Use the name `SwiftExtensionContainer` to match the package, SwiftUI interface, and a default bundle identifier.
                
                @Image(source: "project-config.png", alt: "A screenshot of Xcode's new project configuration, with the name SwiftExtensionContainer used, and SwiftUI interface selected.")
            }
            
            @Step {
                Save it to the package root directory.
                
                @Code(name: "chime-swift/", file: "extensions-project-container-1-files.txt")
            }
            
            @Step {
                Add the package as a local dependency.
                
                Drag the `chime-swift` package directory into the Xcode project window's file browser.
                
                @Image(source: "project-local-package.png", alt: "A screenshot of the Xcode project, with the chime-swift local package dependency added.")
            }
        }
    }
    
        
    @Section(title: "Configure the Extension Target") {
        @ContentAndMedia {
            We now have all of the infrastructure done, and we can create a real ExtensionKit target. We do have a little more work to do here to make sure things are structured as we'll need.
        }
        
        @Steps {
            @Step {
                Create a new Target
                
                Select the "Generic Extension" template
                
                @Image(source: "project-target.png", alt: "A screenshot of Xcode's new target guide, with the Generic Extension template selected.")
            }
            
            @Step {
                Configure the target.
                
                Name it `SwiftExtension`, and be "Supports User Interface" is unchecked. This extension will not have a UI.
                
                @Image(source: "project-target-config.png", alt: "A screenshot of Xcode's Generic Extension configuration. Name is SwiftExtension, and supports user interface is unselected.")
            }
            
            @Step {
                Set the extension point to `com.chimehq.Edit.extension`.
                
                Modify SwiftExtension's Info.plist file, setting the `EXExtensionPointIdentifier` field.
                
                @Image(source: "project-info-plist.png", alt: "A screenshot of Xcode's plist editor, modifying the extension's Info.plist to use the needed value.")
            }
        }
    }
            
    @Section(title: "Create the Extension Entry Point") {
        @ContentAndMedia {
            Our last step is to create a real ExtensionKit entry point class. We'll use this to connect our package source up to the installable extension. There is a little bit of boilerplate involved, but the end result gives us a project with lots of flexibility for testing and distribution.
        }
        
        @Steps {
            @Step {
                Delete the `SwiftExtension/SwiftExtension.swift` file.
                
                This file was created by the generic template, and won't be needed.
            }
            
            @Step {
                Create a `SwiftStandaloneExtension` swift file in the `SwiftExtension` group.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-1-standalone.swift")
            }
            
            @Step {
                Import `ChimeKit`.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-2-standalone.swift")
            }

            @Step {
                Declare conformance to `ChimeExtension`.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-3-standalone.swift")
            }

            @Step {
                Implemented the required methods.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-4-standalone.swift")
            }

            @Step {
                Add an instance variable that references our `SwiftExtension` type.
                
                This is where all the functionality actually lives. We create it when the Chime app makes a connection to our extension.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-5-standalone.swift")
            }

            @Step {
                Add implementations for all of the `ExtensionProtocol` methods.
                
                The defaults will not work here.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-6-standalone.swift")
            }

            @Step {
                Forward all the calls to the `SwiftExtension` instance.
                
                @Code(name: "SwiftExtension/SwiftStandaloneExtension.swift", file: "extensions-project-extension-7-standalone.swift")
            }
        }
    }
}
